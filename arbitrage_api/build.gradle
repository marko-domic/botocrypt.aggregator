plugins {
    id 'java'
    id 'com.google.protobuf'
    id 'de.undercouch.download'
    id 'idea'
}

dependencies {

    implementation "io.grpc:grpc-protobuf:${grpc_version}"
    implementation "io.grpc:grpc-stub:${grpc_version}"
    compileOnly "org.apache.tomcat:tomcat-annotations-api:10.0.5"
    implementation "com.google.protobuf:protobuf-java-util:${protobuf_version}"
    implementation "io.grpc:grpc-netty:${grpc_version}"

    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
    compileOnly 'org.jetbrains:annotations:13.0'
}

def separator = File.separator
def sourceOutputDir = project.projectDir
def srcDir = "${sourceOutputDir}${separator}src"
def srcMainDir = "${srcDir}${separator}main"
def protoDir = "${srcMainDir}${separator}proto"
def protoFile = "${protoDir}${separator}arbitrage.proto"

task downloadFile(type: Download) {
    src "${arbitrage_api_spec_url}/${arbitrage_api_spec_version}/${arbitrage_api_spec_file_name}"
    dest "${protoFile}"
    onlyIfModified true
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protoc_version}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}" }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc { }
        }
        all().each { task ->
            task.dependsOn downloadFile
        }
    }
}

clean {
    delete "${sourceOutputDir}${separator}src"
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}${separator}main${separator}java")
        sourceDirs += file("${protobuf.generatedFilesBaseDir}${separator}main${separator}grpc")
    }
}

compileJava.options.encoding = 'UTF-8'
